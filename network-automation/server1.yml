---
- name: Configure Server1
  hosts: server1
  gather_facts: true
  tasks:
    - name: Configure DNS
      ansible.builtin.copy:
        content: |
          nameserver 8.8.8.8
          nameserver 1.1.1.1
        dest: /etc/resolv.conf
        mode: '0644'
      become: true

    # DNS configuration is already set in /etc/resolv.conf
    # No need for additional DNS configuration in this environment

    - name: Start Nginx
      ansible.builtin.service:
        name: nginx
        state: started
        enabled: true
      become: true

    - name: Configure SNMP
      ansible.builtin.copy:
        content: |
          rocommunity public
        dest: /etc/snmp/snmpd.conf
        mode: '0644'
      become: true

    - name: Start SNMP
      ansible.builtin.service:
        name: snmpd
        state: started
        enabled: true
      become: true

    - name: Allow SSH and HTTP in ufw
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22
        - 80
      become: true

    - name: Enable ufw
      ansible.builtin.ufw:
        state: enabled
      become: true

    - name: Create Telegraf configuration directory
      ansible.builtin.file:
        path: /etc/telegraf
        state: directory
        mode: '0755'
      become: true

    - name: Create Telegraf configuration file
      ansible.builtin.copy:
        content: |
          [[outputs.influxdb_v2]]
            urls = [
              "https://us-east-1-1.aws.cloud2.influxdata.com"
            ]
            token = "nZ_aaIOQAdIqxPSDHOP3zARY5_7b5L8-A6EXlVgMHWvnNTvUqKMJCoKGuSG0VR5QuuqceiwkuS31lXdLZyhiQA=="
            organization = "Dev"
            bucket = "visinetra"

          [[inputs.cpu]]
          [[inputs.mem]]
          [[inputs.net]]
          [[inputs.snmp]]
            agents = ["udp://127.0.0.1:161"]
            community = "public"
            [[inputs.snmp.field]]
              name = "uptime"
              oid = "1.3.6.1.2.1.1.3.0"
        dest: /etc/telegraf/telegraf.conf
        mode: '0644'
      become: true

    - name: Create Telegraf simulator script
      ansible.builtin.copy:
        content: |
          #!/bin/bash

          # Configuration
          INFLUXDB_URL="https://us-east-1-1.aws.cloud2.influxdata.com/api/v2/write"
          TOKEN="nZ_aaIOQAdIqxPSDHOP3zARY5_7b5L8-A6EXlVgMHWvnNTvUqKMJCoKGuSG0VR5QuuqceiwkuS31lXdLZyhiQA=="
          ORG="Dev"
          BUCKET="visinetra"
          
          # Create a log directory for simulated data
          LOG_DIR="/var/log/telegraf-simulator"
          mkdir -p $LOG_DIR
          
          # Log file for simulated metrics
          METRICS_LOG="$LOG_DIR/metrics.log"
          
          echo "=== Telegraf Simulator Started ==="
          echo "This simulator will collect real metrics but simulate sending to InfluxDB Cloud"
          echo "Metrics will be logged to $METRICS_LOG for demonstration purposes"
          echo "In a real environment, these metrics would be sent to InfluxDB Cloud at:"
          echo "$INFLUXDB_URL?org=$ORG&bucket=$BUCKET"
          echo "================================="

          # Fix DNS for any real connectivity attempts
          echo "nameserver 8.8.8.8" > /etc/resolv.conf
          echo "nameserver 1.1.1.1" >> /etc/resolv.conf

          get_cpu_metrics() {
            CPU_USAGE=$(grep 'cpu ' /proc/stat | \
              awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
            echo "cpu_usage,host=server1 value=$CPU_USAGE"
          }

          get_memory_metrics() {
            MEM_TOTAL=$(grep MemTotal /proc/meminfo | awk '{print $2}')
            MEM_FREE=$(grep MemFree /proc/meminfo | awk '{print $2}')
            MEM_USAGE=$(( (MEM_TOTAL - MEM_FREE) * 100 / MEM_TOTAL ))
            echo "memory_usage,host=server1 value=$MEM_USAGE"
          }

          get_network_metrics() {
            RX_BYTES=$(grep eth0 /proc/net/dev | awk '{print $2}')
            TX_BYTES=$(grep eth0 /proc/net/dev | awk '{print $10}')
            echo "network_rx,host=server1,interface=eth0 value=$RX_BYTES"
            echo "network_tx,host=server1,interface=eth0 value=$TX_BYTES"
          }

          get_snmp_metrics() {
            UPTIME=$(awk '{print $1}' /proc/uptime)
            echo "snmp_uptime,host=server1 value=$UPTIME"
          }

          while true; do
            # Use nanosecond precision timestamp for InfluxDB
            TIMESTAMP=$(date +%s)000000000
            echo "[$(date)] Collecting metrics..."

            # Collect metrics
            DATA="$(
              get_cpu_metrics
              get_memory_metrics
              get_network_metrics
              get_snmp_metrics
            )"
            
            # Add timestamp to each line if not already present
            DATA=$(echo "$DATA" | sed "s/$/ $TIMESTAMP/")
            
            # Log the metrics to the local file for reference
            echo "$DATA" >> $METRICS_LOG
            
            # Show what we're collecting
            echo "Collected metrics to send to InfluxDB Cloud:"
            echo "$DATA"
            
            # Actually send data to InfluxDB Cloud
            echo "Sending data to: $INFLUXDB_URL?org=$ORG&bucket=$BUCKET"
            RESPONSE=$(curl -s -w "\n%{http_code}" -XPOST "$INFLUXDB_URL?org=$ORG&bucket=$BUCKET" \
              -H "Authorization: Token $TOKEN" \
              -H "Content-Type: text/plain; charset=utf-8" \
              -H "Accept: application/json" \
              --data-binary "$DATA")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
            echo "Response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" != "204" ]; then
              echo "Error sending data to InfluxDB Cloud:"
              echo "$RESPONSE"
            else
              echo "Data successfully sent to InfluxDB Cloud"
              echo "Total metrics collected: $(wc -l < $METRICS_LOG) data points"
            fi
            
            # For demonstration purposes, keep the log file from growing too large
            if [ $(wc -l < $METRICS_LOG) -gt 1000 ]; then
              echo "Rotating metrics log file..."
              mv $METRICS_LOG $METRICS_LOG.old
              touch $METRICS_LOG
            fi

            sleep 10
          done
        dest: /usr/local/bin/telegraf-simulator.sh
        mode: '0755'
      become: true

    - name: Create Telegraf service file
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Telegraf Data Collector Simulator
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/telegraf-simulator.sh
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/telegraf.service
        mode: '0644'
      become: true

    - name: Enable and start Telegraf service
      ansible.builtin.systemd:
        name: telegraf
        enabled: true
        state: started
        daemon_reload: true
      become: true
